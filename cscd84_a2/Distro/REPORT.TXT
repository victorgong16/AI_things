CSC D84 - Artificial Intelligence

Assignment 2 - MiniMax and Game Trees 

This assignment is worth:

10 AIUs (Artificial Intelligence Units)
toward the 35% assignment component of your final
mark.

________________________________________________

Student Name Gong, Zheng:

Student number: 998948830

UTORid: gongzhe1

READ THIS AND SIGN YOUR NAME AT THE END:

 I certify that I have read the UTSC code on academic
honesty and plaguarism. All work submitted as part
of this assignment is my own.

	Signed: Zheng Gong


(-5 marks for failing to provide the identifying
 information requested above)
________________________________________________

Answer the following questions. Be concise and clear
but explain carefully when needed.

1 .- (5 marks) Explain the design of your utility function.
     Describe all the factors that influence its value, and
     how their influence was evaluated and integrated into
     a single, meaningful value. Convince us that your utility
     makes sense!

     If the node is terminal, we add 200 to the negative value and 150 to the positive value. Meaning we more heavily consider getting eaten by a cat then eating a cheese. However if the cheese is the last remaining one, we add 300 to the positive value since eating this cheese means we will win the game. 

     If the node is not terminal, the function determines the closest cheese and closest cat to the node, subtracts its distance to the node from 100 (since smaller distance is more positive/negative in this case), and then adds it to the positive/negative value respectively.

2 .- (2 marks) Ignoring computation time, what is the effect of
     search depth (number of turns) on the chances of the mouse
     winning the game. 

     The greater the depth, the more "turns" the mouse can look into,
     therefore more accurately calculating the best possible move. So the higher
     the search depth, the higher the mouse's chance of winning the game.

3 .- (2 marks) What situations will cause your mouse to lose?
     can these be fixed either with the utility function, or
     by changing the search depth? if so, how?

     Deadends cause the mouse to lose. I think with a greater search depth the mouse should be able to find the true way of going to the cheese without running into a deadend accidentally. An addition to the utility function should also be able to fix this by checking for deadends, although I have already attempted to implement this to not great effect.

4 .- (2 marks) Compare cats with smartness=.8 against cats with
     smartness=1 - which are harder for your mouse to beat?
     why do you think that is?

     For reasons that I couldn't figure out in time, the mouse keeps thrashing, where it moves back and forth between the same two spaces for a long time. When a cat gets close enough however the utility function moves the mouse to the cheese because the cat is dangerous. I have tried to increase the search depth and this seems to do the trick with varying degrees of success depending on mazes. I think with a low search depth the mouse can not accurately determine the best next step because with the limited information the utility function is giving it very very similar values for two adjacent squares. 

5 .- (2 marks) Can the mouse be made unbeatable by having an
     optimal utility function?

     I can think of a situation where the maze generated places all cheeses in deadends. If the mouse ever tries to go for a cheese it can potentially be cornered by cats, especially if the number of cats and number of cheeses are both high.

6 .- (2 bonus marks) Could a human playing the game in place
      of the mouse do better than your code? (yes, no, and
      a reasonable explanation of why)

      I think a human might be able to do very well if the number of cats is kept low. The human player can see very quickly how to get to the closest cheese and if the number of cats is kept low then there isn't much to think about other than getting the cheese as quickly as possible. However human performance will suffer when the number of cats is high and cheeses are placed in unoptimal corners, since the player would now have to consider how to avoid all the cats while going for the safest cheese without trapping him/herself, which requires a lot of forward planning. 

_____________________________________________________

Mark with an 'x' where appropriate. If something is only
working partially, briefly describe what works, what
doesn't work, or what problems exist.
	
	Complete/Working	Partial		Not done

utility
 function              X

MiniMax                X

Alpha/Beta
 pruning               X
_____________________________________________________

Marking:

(10 marks) Implemented a non-trivial, clever, and
           effective utility function. It allows the
           mouse to win the game often. 

(10 marks) Correctly implementing MiniMax. The algorithm
           should produce the expected behaviour. The
           mouse should take a reasonable path to the
           cheese and avoid cats. The cats will try to
           catch the mouse. Mouse is not easy to catch.

(10 marks) Implemented alpha-beta pruning. The algorithm
           significantly reduces the amount of search
           while producing identical results as those
           from standard MiniMax 

(15 marks) Competitive (TA assigned) based on how smart
           your mouse is (this is related to your
           utility function above!)

(15 marks) Answers in this report file

(2 bonus)  Bonus!

Total for A2:       / out of 60


